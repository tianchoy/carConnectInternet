{"version":3,"file":"value.js","sources":["uni_modules/uv-text/components/uv-text/value.js"],"sourcesContent":["import { func, date, url } from '@/uni_modules/uv-ui-tools/libs/function/test.js'\r\nimport { error, timeFormat, priceFormat } from '@/uni_modules/uv-ui-tools/libs/function/index.js'\r\nexport default {\r\n    computed: {\r\n        // 经处理后需要显示的值\r\n        value() {\r\n            const {\r\n                text,\r\n                mode,\r\n                format,\r\n                href\r\n            } = this\r\n            // 价格类型\r\n            if (mode === 'price') {\r\n                // 如果text不为金额进行提示\r\n                if (!/^\\d+(\\.\\d+)?$/.test(text)) {\r\n                    error('金额模式下，text参数需要为金额格式');\r\n                }\r\n                // 进行格式化，判断用户传入的format参数为正则，或者函数，如果没有传入format，则使用默认的金额格式化处理\r\n                if (func(format)) {\r\n                    // 如果用户传入的是函数，使用函数格式化\r\n                    return format(text)\r\n                }\r\n                // 如果format非正则，非函数，则使用默认的金额格式化方法进行操作\r\n                return priceFormat(text, 2)\r\n            } if (mode === 'date') {\r\n                // 判断是否合法的日期或者时间戳\r\n                !date(text) && error('日期模式下，text参数需要为日期或时间戳格式')\r\n                // 进行格式化，判断用户传入的format参数为正则，或者函数，如果没有传入format，则使用默认的格式化处理\r\n                if (func(format)) {\r\n                    // 如果用户传入的是函数，使用函数格式化\r\n                    return format(text)\r\n                } if (format) {\r\n                    // 如果format非正则，非函数，则使用默认的时间格式化方法进行操作\r\n                    return timeFormat(text, format)\r\n                }\r\n                // 如果没有设置format，则设置为默认的时间格式化形式\r\n                return timeFormat(text, 'yyyy-mm-dd')\r\n            } if (mode === 'phone') {\r\n                // 判断是否合法的手机号\r\n                // !mobile(text) && error('手机号模式下，text参数需要为手机号码格式')\r\n                if (func(format)) {\r\n                    // 如果用户传入的是函数，使用函数格式化\r\n                    return format(text)\r\n                } if (format === 'encrypt') {\r\n                    // 如果format为encrypt，则将手机号进行星号加密处理\r\n                    return `${text.substr(0, 3)}****${text.substr(7)}`\r\n                }\r\n                return text\r\n            } if (mode === 'name') {\r\n                // 判断是否合法的字符粗\r\n                !(typeof (text) === 'string') && error('姓名模式下，text参数需要为字符串格式')\r\n                if (func(format)) {\r\n                    // 如果用户传入的是函数，使用函数格式化\r\n                    return format(text)\r\n                } if (format === 'encrypt') {\r\n                    // 如果format为encrypt，则将姓名进行星号加密处理\r\n                    return this.formatName(text)\r\n                }\r\n                return text\r\n            } if (mode === 'link') {\r\n                // 判断是否合法的字符粗\r\n                !url(href) && error('超链接模式下，href参数需要为URL格式')\r\n                return text\r\n            }\r\n            return text\r\n        }\r\n    },\r\n    methods: {\r\n        // 默认的姓名脱敏规则\r\n        formatName(name) {\r\n            let value = ''\r\n            if (name.length === 2) {\r\n                value = name.substr(0, 1) + '*'\r\n            } else if (name.length > 2) {\r\n                let char = ''\r\n                for (let i = 0, len = name.length - 2; i < len; i++) {\r\n                    char += '*'\r\n                }\r\n                value = name.substr(0, 1) + char + name.substr(-1, 1)\r\n            } else {\r\n                value = name\r\n            }\r\n            return value\r\n        }\r\n    }\r\n}\r\n"],"names":["error","func","priceFormat","date","timeFormat","url","value"],"mappings":";;;AAEA,MAAe,QAAA;AAAA,EACX,UAAU;AAAA;AAAA,IAEN,QAAQ;AACJ,YAAM;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAChB,IAAgB;AAEJ,UAAI,SAAS,SAAS;AAElB,YAAI,CAAC,gBAAgB,KAAK,IAAI,GAAG;AAC7BA,oDAAK,MAAC,qBAAqB;AAAA,QAC9B;AAED,YAAIC,yCAAAA,KAAK,MAAM,GAAG;AAEd,iBAAO,OAAO,IAAI;AAAA,QACrB;AAED,eAAOC,0CAAW,YAAC,MAAM,CAAC;AAAA,MAC1C;AAAc,UAAI,SAAS,QAAQ;AAEnB,SAACC,8CAAK,IAAI,KAAKH,0CAAAA,MAAM,yBAAyB;AAE9C,YAAIC,yCAAAA,KAAK,MAAM,GAAG;AAEd,iBAAO,OAAO,IAAI;AAAA,QACrB;AAAC,YAAI,QAAQ;AAEV,iBAAOG,0CAAU,WAAC,MAAM,MAAM;AAAA,QACjC;AAED,eAAOA,0CAAU,WAAC,MAAM,YAAY;AAAA,MACpD;AAAc,UAAI,SAAS,SAAS;AAGpB,YAAIH,yCAAAA,KAAK,MAAM,GAAG;AAEd,iBAAO,OAAO,IAAI;AAAA,QACtC;AAAkB,YAAI,WAAW,WAAW;AAExB,iBAAO,GAAG,KAAK,OAAO,GAAG,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC;AAAA,QACnD;AACD,eAAO;AAAA,MACvB;AAAc,UAAI,SAAS,QAAQ;AAEnB,UAAE,OAAQ,SAAU,aAAaD,0CAAAA,MAAM,sBAAsB;AAC7D,YAAIC,yCAAAA,KAAK,MAAM,GAAG;AAEd,iBAAO,OAAO,IAAI;AAAA,QACtC;AAAkB,YAAI,WAAW,WAAW;AAExB,iBAAO,KAAK,WAAW,IAAI;AAAA,QAC9B;AACD,eAAO;AAAA,MACvB;AAAc,UAAI,SAAS,QAAQ;AAEnB,SAACI,6CAAI,IAAI,KAAKL,0CAAAA,MAAM,uBAAuB;AAC3C,eAAO;AAAA,MACV;AACD,aAAO;AAAA,IACV;AAAA,EACJ;AAAA,EACD,SAAS;AAAA;AAAA,IAEL,WAAW,MAAM;AACb,UAAIM,SAAQ;AACZ,UAAI,KAAK,WAAW,GAAG;AACnB,QAAAA,SAAQ,KAAK,OAAO,GAAG,CAAC,IAAI;AAAA,MAC5C,WAAuB,KAAK,SAAS,GAAG;AACxB,YAAI,OAAO;AACX,iBAAS,IAAI,GAAG,MAAM,KAAK,SAAS,GAAG,IAAI,KAAK,KAAK;AACjD,kBAAQ;AAAA,QACX;AACD,QAAAA,SAAQ,KAAK,OAAO,GAAG,CAAC,IAAI,OAAO,KAAK,OAAO,IAAI,CAAC;AAAA,MACpE,OAAmB;AACH,QAAAA,SAAQ;AAAA,MACX;AACD,aAAOA;AAAA,IACV;AAAA,EACJ;AACL;;"}