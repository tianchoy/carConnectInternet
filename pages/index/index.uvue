<template>
	<view class="container">
		<custom-navBar title="首页" :show-back="true" backgroundColor="#fff" textColor="#333"
			@capsuleClick="handleCapsule" :showCapsule="true">
		</custom-navBar>
		<view class="map-container" v-if="showMap">
			<!-- <MapComponent :center="center" :mapScale="mapScale" :polygons="polygons" :markers="markers"
				:polyline="polyline" :isDrawing="isDrawing" :currentMode="currentMode" @map-tap="handleMapTap"
				@marker-tap="handMarkerTap" /> -->
			<map id="myMap" :latitude="center.latitude" :longitude="center.longitude" :polygons="polygons"
				:markers="markers" :polyline="polyline" :scale="mapScale" @tap="handleMapTap"
				style="width:100%;height:100%" :show-location="true" @markertap="handMarkerTap">
			</map>
			<deviceInfoComponent :show-popup="showDevicePopup" :device-info="currentDeviceInfo"
				@close="closeDevicePopup" />
		</view>
		<view v-else>
			<indexListMode />
		</view>
		<view class="tool-nav">
			<view class="btn-map-list" @click="toggleMapMode">
				<image :src="showMap ? '/static/list.png' : '/static/map.png'" class="btn-map-list-icon" />
			</view>
		</view>
		<view class="tool-more" @click="toggleMoreTools" v-if="showMap">
			<image src="/static/icon-tool.png" mode="aspectFit" class="btn-tool-more-icon"></image>
		</view>

		<view class="tools-panel" v-if="showMoreTools && showMap">
			<uv-grid :col="5" @click="click">
				<uv-grid-item v-for="(item,index) in baseList" :key="index">
					<uv-icon :customStyle="{paddingTop:20+'rpx'}" :name="item.name" :size="54"></uv-icon>
					<text class="grid-text">{{item.title}}</text>
				</uv-grid-item>
			</uv-grid>
			<view class="tool-tag-item">
				<uv-button @click="startDrawing" :disabled="isDrawing">
					开始绘制
				</uv-button>
				<uv-button @click="addPoint" :disabled="!isDrawing">
					添加当前点
				</uv-button>
				<uv-button @click="finishDrawing" :disabled="!isDrawing || points.length < 3">
					完成绘制
				</uv-button>
				<uv-button @click="clearAll">
					重置
				</uv-button>
			</view>

			<!-- <uv-button :class="['mode-btn', currentMode === 'draw' ? 'active' : '']" @click="toggleMode('draw')">
				绘制模式
			</uv-button>
			<uv-button :class="['mode-btn', currentMode === 'track' ? 'active' : '']" @click="toggleMode('track')">
				轨迹模式
			</uv-button>
			<template v-if="currentMode === 'draw'">
				<uv-button @click="startDrawing" :disabled="isDrawing">
					开始绘制
				</uv-button>
				<uv-button @click="addPoint" :disabled="!isDrawing">
					添加当前点
				</uv-button>
				<uv-button @click="finishDrawing" :disabled="!isDrawing || points.length < 3">
					完成绘制
				</uv-button>
				<uv-button @click="clearAll">
					重置
				</uv-button>
			</template>

			<template v-else>
				<uv-button @click="startPlayback" :disabled="isPlaying">
					开始回放
				</uv-button>
				<uv-button @click="pausePlayback" :disabled="!isPlaying">
					暂停
				</uv-button>
				<uv-button @click="clearTrack">
					清除轨迹
				</uv-button>
				<view class="speed-control">
					<text class="speed-label">回放速度: {{playbackSpeed}}x</text>
					<slider :value="playbackSpeed" min="1" max="5" @change="setPlaybackSpeed" show-value />
				</view>
			</template> -->
		</view>
	</view>
</template>

<script setup lang="uts">
	import amapFile from '../../utils/amap-wx.130'

	const navBarHeight = ref(88); // 由组件实际高度决定

	const handleCapsule = (type) => {
		if (type === 'close') {
			uni.navigateBack();
		} else {
			uni.showToast({ title: '菜单点击', icon: 'none' });
		}
	};

	// 地图状态
	const center = reactive({
		latitude: 39.90469,
		longitude: 116.40717
	})
	const mapScale = ref(12)
	const currentMode = ref<'draw' | 'track'>('draw')
	const showMap = ref(true)
	const showMoreTools = ref(true)
	const carInFence = ref(false) // 车辆是否在围栏内

	// 电子围栏相关
	const isDrawing = ref(false)
	const points = ref<Array<{ latitude : number, longitude : number }>>([])
	const polygons = ref<Array<any>>([])
	const draggingIndex = ref(-1)   // 当前拖动的顶点索引
	const isDragging = ref(false)   // 是否正在拖动
	const originalPoints = ref<Array<{ latitude : number, longitude : number }>>([]) // 拖动前的点

	// 轨迹回放相关
	const trackPoints = ref<Array<{ latitude : number, longitude : number, timestamp : number }>>([])
	const polyline = ref<Array<any>>([])
	const isPlaying = ref(false)
	const playbackSpeed = ref(1) //轨迹回放速度
	const totalDistance = ref(0)
	const playbackInterval = ref<number | null>(null)
	const currentIndex = ref(0)
	const carMarker = ref<any>(null)

	//高德地图相关
	const address = ref('')
	const gdKey = 'e3e773ad74f7ba25f38775c9c8db6474'
	const myAmapFun = ref()

	// 标记点集合
	const markers = ref<Array<any>>([])

	// 控制弹窗显示
	const showDevicePopup = ref(false)
	const currentDeviceInfo = ref({
		deviceName: '',
		carNumber: '',
		deviceSerial: '',
		locationType: '',
		lngLat: '',
		updateTime: '',
		locationTime: '',
		speed: '',
		totalMileage: '',
		address: ''
	})

	const currentToolItem = ref(0)
	const baseList = ref([{
		name: '/static/gjhf.png',
		title: '轨迹回放'
	}, {
		name: '/static/clgz.png',
		title: '车辆跟踪'
	}, {
		name: '/static/lcjl.png',
		title: '里程记录'
	}, {
		name: '/static/tcjl.png',
		title: '停车记录'
	},{
		name:'/static/dzwl.png',
		title:'电子围栏'
	}
	])

	const click = (name) => {
		uni.showToast({
			icon: 'none',
			title: `点击了第${name}个`
		})
	}
	// 检测车辆是否在电子围栏内
	const checkCarInFence = (point : { latitude : number, longitude : number }) => {
		if (polygons.value.length === 0 || polygons.value[0].points.length < 3) {
			carInFence.value = false
			return
		}

		const polygon = polygons.value[0].points
		const x = point.longitude
		const y = point.latitude

		let inside = false
		for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
			const xi = polygon[i].longitude
			const yi = polygon[i].latitude
			const xj = polygon[j].longitude
			const yj = polygon[j].latitude

			const intersect = ((yi > y) !== (yj > y)) &&
				(x < (xj - xi) * (y - yi) / (yj - yi) + xi)

			if (intersect) inside = !inside
		}

		carInFence.value = inside
		console.log(`车辆位置: ${point.latitude.toFixed(6)}, ${point.longitude.toFixed(6)} - ${inside ? '在围栏内' : '在围栏外'}`)
	}

	// 初始化加载测试的电子围栏
	onMounted(async () => {
		myAmapFun.value = new amapFile.AMapWX({ key: gdKey });
		await getlocation() //获取当前位置	
		await loadPolygons() //加载默认电子围栏
		await loadSampleTrack() //加载默认回放记录
		await checkCarInFence(center) //检测车辆在不在围栏里

	})

	//获取当前位置
	const getlocation = () => {
		uni.getLocation({
			success: (res) => {
				console.log('当前坐标点：', res);
				center.latitude = res.latitude
				center.longitude = res.longitude
				getRegeo(res.latitude, res.longitude)
				// 检测车辆位置
				checkCarInFence({ latitude: res.latitude, longitude: res.longitude })
			}
		})
	}

	const getRegeo = (latitude, longitude) => {
		myAmapFun.value.getRegeo({
			location: `${longitude},${latitude}`,
			success: (data) => {
				console.log('获取地址信息:', data)
				if (data.length > 0) {
					address.value = data[0].regeocodeData.formatted_address
					console.log('地址信息:', address.value)
					markers.value = [
						{
							id: 1,
							latitude: latitude,
							longitude: longitude,
							iconPath: '/static/marker.png',
							width: 40,
							height: 40,
							callout: {
								content: address.value,
								borderRadius: 5,
								padding: 5,
								display: 'ALWAYS'
							}
						}
					]
				} else {
					uni.showToast({ title: '获取地址失败', icon: 'none' })
				}
			},
			fail: (err) => {
				uni.showToast({
					title: err.errMsg,
					icon: 'none'
				})
			}
		})
	}

	//打开地图app跳转
	const handMarkerTap = (e) => {
		// const mapContext = uni.createMapContext("myMap", this); 
		// mapContext.openMapApp({
		// 	latitude: center.latitude,  
		// 	longitude: center.longitude, 
		// 	destination: address.value, 
		// 	success(res) {
		// 		console.log('success!!', res);
		// 	},
		// 	fail(err) {
		// 		uni.showToast({
		// 			title: err.errMsg,
		// 			icon: 'none'
		// 		})
		// 	}
		// });
		console.log('markertap event:', e)

		// 微信小程序返回的是markerId
		if (e.detail && e.detail.markerId !== undefined) {
			const markerId = e.detail.markerId
			const marker = markers.value.find(m => m.id === markerId)

			if (marker && marker.extData) {
				currentDeviceInfo.value = {
					deviceName: marker.extData.deviceName || '',
					carNumber: marker.extData.carNumber || '',
					deviceSerial: marker.extData.deviceSerial || '',
					locationType: marker.extData.locationType || '',
					lngLat: `${marker.extData.latitude},${marker.extData.longitude}` || '',
					updateTime: marker.extData.updateTime || '',
					locationTime: marker.extData.locationTime || '',
					speed: marker.extData.speed || '',
					totalMileage: marker.extData.totalMileage || '',
					address: marker.extData.address || ''
				}
				showDevicePopup.value = true
				return
			}
		}

		console.warn('无法获取标记点信息', e)
		uni.showToast({
			title: '无法获取设备信息',
			icon: 'none'
		})
	}

	// 关闭弹窗
	const closeDevicePopup = () => {
		showDevicePopup.value = false
	}

	// 切换地图/列表视图
	const toggleMapMode = () => {
		showMap.value = !showMap.value
	}

	const toggleMoreTools = () => {
		showMoreTools.value = !showMoreTools.value
	}

	// 切换模式
	const toggleMode = (mode : 'draw' | 'track') => {
		currentMode.value = mode
		if (mode === 'track') {
			initCarMarker()
			resetPlayback()
			adjustMapToFitTrack()
		} else {
			// 切换到绘制模式时更新标记点
			updateMapDisplay()
		}
	}

	/* 电子围栏功能部分 */
	const startDrawing = () => {
		isDrawing.value = true
		points.value = []
		updateMapDisplay()
	}

	const handleMapTap = (point : { latitude : number, longitude : number }) => {
		if (!isDrawing.value || currentMode.value !== 'draw') return
		addNewPoint(point.detail.latitude, point.detail.longitude)
	}

	const addPoint = () => {
		addNewPoint(center.latitude, center.longitude)
	}

	const addNewPoint = (lat : number, lng : number) => {
		points.value.push({ latitude: lat, longitude: lng })
		updateMapDisplay()
	}

	const removePoint = (index : number) => {
		points.value.splice(index, 1)
		updateMapDisplay()
	}

	const finishDrawing = () => {
		if (points.value.length < 3) {
			uni.showToast({ title: '至少需要3个顶点', icon: 'none' })
			return
		}
		isDrawing.value = false
		uni.showToast({ title: `围栏创建成功，共${points.value.length}个顶点` })
		console.log('电子围栏坐标:', JSON.stringify(points.value))

		updateFencePolygon()
		checkCarInFence(center)
	}

	const clearAll = () => {
		isDrawing.value = false
		points.value = []
		polygons.value = []
		carInFence.value = false
		isDragging.value = false
		draggingIndex.value = -1
		updateMapDisplay()
	}

	const loadPolygons = () => {
		polygons.value = [{
			points: [{ "latitude": 35.277849527708206, "longitude": 115.39025552959356 },
			{ "latitude": 35.22397928678945, "longitude": 115.37543744586583 },
			{ "latitude": 35.23341600978699, "longitude": 115.44904849298473 },
			{ "latitude": 35.279357522215726, "longitude": 115.45106784538075 }],
			strokeWidth: 2,
			strokeColor: '#FF0000',
			fillColor: 'rgba(255,0,0,0.2)',
			zIndex: 1
		}]
	}

	// 更新围栏多边形显示
	function updateFencePolygon() {
		polygons.value = [{
			points: points.value,
			strokeWidth: 2,
			strokeColor: isDragging.value ? '#00AA00' : '#FF0000', // 拖动时改变颜色
			fillColor: isDragging.value ? 'rgba(0,170,0,0.2)' : 'rgba(255,0,0,0.2)',
			zIndex: 1
		}]
	}

	/* 轨迹回放功能部分 */
	const loadSampleTrack = () => {
		// 模拟测试轨迹数据
		const mockTrack = [{ "latitude": 35.26677197770503, "longitude": 115.40126244387386 },
		{ "latitude": 35.23764782824115, "longitude": 115.39397562325496 },
		{ "latitude": 35.23905101311781, "longitude": 115.44459367195407 },
		{ "latitude": 35.270452534471225, "longitude": 115.44611973480175 },
		{ "latitude": 35.26677197770503, "longitude": 115.40126244387386 }]

		trackPoints.value = mockTrack
		calculateTrackDistance()
		updatePolyline()
	}

	// 初始化小车标记
	const initCarMarker = () => {
		if (trackPoints.value.length > 0 && !carMarker.value) {
			carMarker.value = {
				id: 999,
				latitude: trackPoints.value[0].latitude,
				longitude: trackPoints.value[0].longitude,
				iconPath: '/static/car.png',
				width: 32,
				height: 32,
				anchor: { x: 0.5, y: 0.5 }
			}
			markers.value = [carMarker.value]
		}
	}

	// 调整地图视野以适应轨迹
	const adjustMapToFitTrack = () => {
		if (trackPoints.value.length === 0) return

		const bounds = calculateTrackBounds()
		center.latitude = (bounds.minLat + bounds.maxLat) / 2
		center.longitude = (bounds.minLng + bounds.maxLng) / 2

		// 根据轨迹范围自动计算缩放级别
		const latDiff = bounds.maxLat - bounds.minLat
		const lngDiff = bounds.maxLng - bounds.minLng
		const maxDiff = Math.max(latDiff, lngDiff)

		if (maxDiff > 0.1) mapScale.value = 11
		else if (maxDiff > 0.05) mapScale.value = 12
		else if (maxDiff > 0.02) mapScale.value = 13
		else mapScale.value = 14
	}

	// 计算轨迹边界
	const calculateTrackBounds = () => {
		let minLat = trackPoints.value[0].latitude
		let maxLat = trackPoints.value[0].latitude
		let minLng = trackPoints.value[0].longitude
		let maxLng = trackPoints.value[0].longitude

		trackPoints.value.forEach(point => {
			minLat = Math.min(minLat, point.latitude)
			maxLat = Math.max(maxLat, point.latitude)
			minLng = Math.min(minLng, point.longitude)
			maxLng = Math.max(maxLng, point.longitude)
		})

		return { minLat, maxLat, minLng, maxLng }
	}

	const calculateTrackDistance = () => {
		totalDistance.value = 0
		for (let i = 1; i < trackPoints.value.length; i++) {
			totalDistance.value += getDistance(
				trackPoints.value[i - 1].latitude,
				trackPoints.value[i - 1].longitude,
				trackPoints.value[i].latitude,
				trackPoints.value[i].longitude
			)
		}
	}

	// 计算两点间距离（米）
	const getDistance = (lat1 : number, lng1 : number, lat2 : number, lng2 : number) => {
		const rad = (d : number) => d * Math.PI / 180.0
		const radLat1 = rad(lat1)
		const radLat2 = rad(lat2)
		const a = radLat1 - radLat2
		const b = rad(lng1) - rad(lng2)
		const s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) +
			Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)))
		return s * 6378.137 * 1000
	}

	const startPlayback = () => {
		if (trackPoints.value.length === 0) {
			uni.showToast({ title: '没有轨迹数据', icon: 'none' })
			return
		}

		isPlaying.value = true
		currentIndex.value = 0
		initCarMarker()

		// 开始播放
		playbackInterval.value = setInterval(playNextPoint, 1000 / playbackSpeed.value)
	}

	const playNextPoint = () => {
		if (currentIndex.value >= trackPoints.value.length - 1) {
			pausePlayback()
			return
		}

		currentIndex.value++
		const point = trackPoints.value[currentIndex.value]

		// 更新小车位置
		if (carMarker.value) {
			carMarker.value.latitude = point.latitude
			carMarker.value.longitude = point.longitude
			markers.value = [carMarker.value]
		}

		// 检测车辆位置
		checkCarInFence(point)
	}

	const pausePlayback = () => {
		isPlaying.value = false
		if (playbackInterval.value) {
			clearInterval(playbackInterval.value)
			playbackInterval.value = null
		}
	}

	// 重置回放
	const resetPlayback = () => {
		pausePlayback()
		currentIndex.value = 0
		updatePolyline()

		// 重置小车位置
		if (trackPoints.value.length > 0) {
			initCarMarker()
			if (carMarker.value) {
				carMarker.value.latitude = trackPoints.value[0].latitude
				carMarker.value.longitude = trackPoints.value[0].longitude
				markers.value = [carMarker.value]
			}

			// 检测车辆位置
			checkCarInFence(trackPoints.value[0])
		}
	}

	const clearTrack = () => {
		pausePlayback()
		trackPoints.value = []
		polyline.value = []
		totalDistance.value = 0
		carMarker.value = null
		markers.value = []
		carInFence.value = false
	}

	const setPlaybackSpeed = (e : any) => {
		playbackSpeed.value = e.detail.value
		if (isPlaying.value) {
			pausePlayback()
			startPlayback()
		}
	}

	const updatePolyline = () => {
		if (!trackPoints.value || trackPoints.value.length === 0) {
			polyline.value = []
			return
		}

		polyline.value = [{
			points: trackPoints.value.map(p => ({ latitude: p.latitude, longitude: p.longitude })),
			color: '#1890FF',
			width: 4,
			arrowLine: true,
			borderColor: '#FFF',
			borderWidth: 2
		}]
	}

	/* 通用地图更新方法 */
	const updateMapDisplay = () => {
		// 更新标记点
		const newMarkers = []

		// 添加围栏顶点标记
		if (currentMode.value === 'draw') {
			newMarkers.push(...points.value.map((point, index) => ({
				id: 1000 + index,  // 使用数字ID（1000+）
				latitude: point.latitude,
				longitude: point.longitude,
				iconPath: isDragging.value && index === draggingIndex.value
					? '/static/marker_active.png'
					: '/static/marker.png',
				width: 32,
				height: 32,
				callout: { content: `顶点${index + 1}`, display: 'ALWAYS' },
				draggable: !isDrawing.value,  // 只有在绘制完成后才能拖动
				anchor: { x: 0.5, y: 0.5 }    // 设置锚点为中心
			})))
		}

		// 添加车辆标记
		if (carMarker.value) {
			newMarkers.push(carMarker.value)
		}

		markers.value = newMarkers

		// 更新围栏多边形
		if (currentMode.value === 'draw' && points.value.length >= 3) {
			updateFencePolygon()
		} else {
			polygons.value = []
		}

		// 更新轨迹线
		if (currentMode.value === 'track') {
			updatePolyline()
		}
	}
</script>

<style lang="scss">
	.container {
		position: relative;
		width: 100%;
		height: 100vh;
		display: flex;
		flex-direction: column;
		background-color: #f5f7fa;

		.map-container {
			flex: 1;
			width: 100%;
			position: relative;

			.drag-hint {
				position: absolute;
				top: 20rpx;
				left: 0;
				right: 0;
				z-index: 100;
				background-color: rgba(255, 255, 255, 0.9);
				padding: 16rpx;
				text-align: center;
				font-size: 28rpx;
				color: #00aa00;
				font-weight: bold;
				box-shadow: 0 4rpx 10rpx rgba(0, 0, 0, 0.1);
				animation: pulse 1.5s infinite;
			}

			@keyframes pulse {
				0% {
					opacity: 0.7;
				}

				50% {
					opacity: 1;
				}

				100% {
					opacity: 0.7;
				}
			}
		}

		.tool-nav {
			position: absolute;
			top: 200rpx;
			right: 20rpx;
			z-index: 100;

			.btn-map-list {
				width: 60rpx;
				height: 60rpx;

			}

			.btn-map-list-icon {
				width: 100%;
				height: 100%;
				padding: 8rpx;
				border-radius: 10rpx;
				background-color: #69c2f1;
			}
		}

		.tool-more {
			position: absolute;
			top: 30%;
			right: 20rpx;
			z-index: 100;
			width: 60rpx;
			height: 60rpx;

			.btn-tool-more-icon {
				width: 100%;
				height: 100%;
			}
		}

		.tools-panel {
			width: 100%;
		}
	}
</style>