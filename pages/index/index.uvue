<template>
	<view class="container">
		<custom-navBar title="首页" :show-back="false" backgroundColor="#fff" textColor="#333"
			@capsuleClick="handleCapsule" :showCapsule="false">
		</custom-navBar>
		<view class="map-container" v-if="showMap">
			<map id="myMap" :latitude="center.latitude" :longitude="center.longitude" :markers="markers"
				:scale="mapScale" style="width:100%;height:100%" :show-location="true"
				@regionchange="handleRegionChange">
			</map>
		</view>
		<view v-else>
			<indexListMode />
		</view>
		<view class="tool-nav">
			<view class="btn-map-list" @click="toggleMapMode">
				<image :src="showMap ? '/static/list.png' : '/static/map.png'" class="btn-map-list-icon" />
			</view>
		</view>
	</view>
</template>

<script setup lang="uts">
	import amapFile from '../../utils/amap-wx.130'
	//高德地图相关
	const address = ref('')
	const gdKey = 'e3e773ad74f7ba25f38775c9c8db6474'
	const myAmapFun = ref()

	//自定义头部导航
	const navBarHeight = ref(88); // 由组件实际高度决定
	const handleCapsule = (type) => {
		if (type === 'close') {
			uni.navigateBack();
		} else {
			uni.showToast({ title: '菜单点击', icon: 'none' });
		}
	};

	// 地图状态
	const center = reactive({
		latitude: 39.90469,
		longitude: 116.40717
	})
	const mapScale = ref(12)
	const showMap = ref(true)
	// 标记点集合
	const markers = ref<Array<any>>([])



	// 初始化加载测试的电子围栏
	onMounted(async () => {
		myAmapFun.value = new amapFile.AMapWX({ key: gdKey });
		await getlocation() //获取当前位置	
	})

	//获取当前位置
	const getlocation = () => {
		uni.getLocation({
			success: (res) => {
				console.log('当前坐标点：', res);
				center.latitude = res.latitude
				center.longitude = res.longitude
				getRegeo(res.latitude, res.longitude)
			}
		})
	}

	const getRegeo = (latitude, longitude) => {
		myAmapFun.value.getRegeo({
			location: `${longitude},${latitude}`,
			success: (data) => {
				console.log('获取地址信息:', data)
				if (data.length > 0) {
					address.value = data[0].regeocodeData.formatted_address
					console.log('地址信息:', address.value)
					markers.value = [
						{
							id: 1,
							latitude: '35.297468099059046',
							longitude: '115.40080913614395',
							iconPath: '/static/marker.png',
							joinCluster: true,
							width: 40,
							height: 40,
							callout: {

								borderRadius: 5,
								padding: 5,
								display: 'ALWAYS'
							}
						},
						{
							id: 2,
							latitude: '35.29013716066542',
							longitude: '115.3879504152693',
							iconPath: '/static/current-location.png',
							joinCluster: true,
							width: 40,
							height: 40,
							callout: {

								borderRadius: 5,
								padding: 5,
								display: 'ALWAYS'
							}
						},
						{
							id: 3,
							latitude: '35.276764674702385',
							longitude: '115.37423373457307',
							iconPath: '/static/user_location.png',
							joinCluster: true,
							width: 40,
							height: 40,
							callout: {

								borderRadius: 5,
								padding: 5,
								display: 'ALWAYS'
							}
						},
						{
							id: 4,
							latitude: '35.26338122455396',
							longitude: '115.3737993948281',
							iconPath: '/static/marker.png',
							joinCluster: true,
							width: 40,
							height: 40,
							callout: {

								borderRadius: 5,
								padding: 5,
								display: 'ALWAYS'
							}
						},
						{
							id: 5,
							latitude: '35.24911026114625',
							longitude: '115.37670948421612',
							iconPath: '/static/marker-active.png',
							joinCluster: true,
							width: 40,
							height: 40,
							callout: {

								borderRadius: 5,
								padding: 5,
								display: 'ALWAYS'
							}
						},
						{
							id: 6,
							latitude: '35.25490871693403',
							longitude: '115.4736823649265',
							iconPath: '/static/vertex.png',
							joinCluster: true,
							width: 40,
							height: 40,
						},
						{
							id: 7,
							latitude: '35.265920623714884',
							longitude: '115.47432047397626',
							iconPath: '/static/marker.png',
							joinCluster: true,
							width: 40,
							height: 40,
						},
						{
							id: 8,
							latitude: '35.280857632699494',
							longitude: '115.48226198671648',
							iconPath: '/static/marker-active.png',
							joinCluster: true,
							width: 40,
							height: 40,
						},
						{
							id: 9,
							latitude: '35.2892924000666',
							longitude: '115.47252411687543',
							iconPath: '/static/marker.png',
							joinCluster: true,
							width: 40,
							height: 40,
						},
						{
							id: 10,
							latitude: '35.277303128902886',
							longitude: '115.44594871137554',
							iconPath: '/static/user_location.png',
							joinCluster: true,
							width: 40,
							height: 40,
						},
						{
							id: 11,
							latitude: '35.27709737493474',
							longitude: '115.42029729381204',
							iconPath: '/static/marker.png',
							joinCluster: true,
							width: 40,
							height: 40,
						},
					]
				} else {
					uni.showToast({ title: '获取地址失败', icon: 'none' })
				}
			},
			fail: (err) => {
				uni.showToast({
					title: err.errMsg,
					icon: 'none'
				})
			}
		})
	}

	const handleTap = (e) => {
		console.log(e.detail);
		uni.openLocation({
			latitude: e.detail.latitude,
			longitude: e.detail.longitude,
			name: 'test',
			scale: 18,
			success: () => {
				uni.showToast({
					title: '成功调起地图',
					icon: 'none'
				});
			},
			fail: (err) => {
				uni.showToast({
					title: '调起地图失败',
					icon: 'none'
				});
				console.error('调起地图失败:', err);
			}
		});
	}
	// 切换地图/列表视图
	const toggleMapMode = () => {
		showMap.value = !showMap.value
	}

	//聚合点
	const handleRegionChange = (e) => {
		console.log('e', e);
		if (e.type == 'end') {
			const mapCtx = wx.createMapContext('myMap', this)
			mapCtx.initMarkerCluster({
				enableDefaultStyle: false,
				zoomOnClick: true,
				gridSize: 10,
				maxZoom: 17,
				minClusterSize: 2,
				success: (res) => {
					console.log('初始化标记点聚合成功：', res);
				},
				fail: (err) => {
					console.error('初始化标记点聚合失败：', err);
				}
			})
			console.log(mapCtx);

			mapCtx.getScale({
				success: res => {
					console.log(res.scale);
				}
			})

			//运动轨迹
			// mapCtx.moveAlong({
			// 	markerId:1,
			// 	autoRotate:false,
			// 	path:[
			// 		{
			// 			latitude: '35.297468099059046',
			// 			longitude: '115.40080913614395',
			// 		},
			// 		{
			// 			latitude: '35.2892924000666',
			// 			longitude: '115.47252411687543',
			// 		},
			// 		{
			// 			latitude: '35.276764674702385',
			// 			longitude: '115.37423373457307',
			// 		}
			// 	],
			// 	duration:1000,
			// 	precision:{},
			// 	success:res =>{
			// 		console.log(res);
			// 	}
			// })
		}

	}
</script>

<style lang="scss">
	.container {
		position: relative;
		width: 100%;
		height: 100vh;
		display: flex;
		flex-direction: column;
		background-color: #f5f7fa;

		.map-container {
			flex: 1;
			width: 100%;
			position: relative;
		}

		.tool-nav {
			position: absolute;
			top: 200rpx;
			right: 20rpx;
			z-index: 100;

			.btn-map-list {
				width: 60rpx;
				height: 60rpx;

			}

			.btn-map-list-icon {
				width: 100%;
				height: 100%;
				padding: 8rpx;
				border-radius: 10rpx;
				background-color: #69c2f1;
			}
		}
	}
</style>