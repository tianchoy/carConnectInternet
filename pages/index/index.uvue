<template>
	<view class="container">
		<custom-navBar title="首页" :show-back="false" backgroundColor="#fff" textColor="#333"
			@capsuleClick="handleCapsule" :showCapsule="true">
		</custom-navBar>
		<view class="map-container" v-if="showMap">
			<map id="myMap" :latitude="center.latitude" :longitude="center.longitude" :markers="markers"
				:scale="mapScale" style="width:100%;height:100%" :show-location="true">
			</map>
			<deviceInfoComponent :show-popup="showDevicePopup" :device-info="currentDeviceInfo"
				@close="closeDevicePopup" />
		</view>
		<view v-else>
			<indexListMode />
		</view>
		<view class="tool-nav">
			<view class="btn-map-list" @click="toggleMapMode">
				<image :src="showMap ? '/static/list.png' : '/static/map.png'" class="btn-map-list-icon" />
			</view>
		</view>
	</view>
</template>

<script setup lang="uts">
	import amapFile from '../../utils/amap-wx.130'

	const navBarHeight = ref(88); // 由组件实际高度决定

	const handleCapsule = (type) => {
		if (type === 'close') {
			uni.navigateBack();
		} else {
			uni.showToast({ title: '菜单点击', icon: 'none' });
		}
	};

	// 地图状态
	const center = reactive({
		latitude: 39.90469,
		longitude: 116.40717
	})
	const mapScale = ref(12)
	const showMap = ref(true)

	//高德地图相关
	const address = ref('')
	const gdKey = 'e3e773ad74f7ba25f38775c9c8db6474'
	const myAmapFun = ref()

	// 标记点集合
	const markers = ref<Array<any>>([])

	// 控制弹窗显示
	const showDevicePopup = ref(false)
	const currentDeviceInfo = ref({
		deviceName: '',
		carNumber: '',
		deviceSerial: '',
		locationType: '',
		lngLat: '',
		updateTime: '',
		locationTime: '',
		speed: '',
		totalMileage: '',
		address: ''
	})


	// 初始化加载测试的电子围栏
	onMounted(async () => {
		myAmapFun.value = new amapFile.AMapWX({ key: gdKey });
		await getlocation() //获取当前位置	

	})

	//获取当前位置
	const getlocation = () => {
		uni.getLocation({
			success: (res) => {
				console.log('当前坐标点：', res);
				center.latitude = res.latitude
				center.longitude = res.longitude
				getRegeo(res.latitude, res.longitude)
			}
		})
	}

	const getRegeo = (latitude, longitude) => {
		myAmapFun.value.getRegeo({
			location: `${longitude},${latitude}`,
			success: (data) => {
				console.log('获取地址信息:', data)
				if (data.length > 0) {
					address.value = data[0].regeocodeData.formatted_address
					console.log('地址信息:', address.value)
					markers.value = [
						{
							id: 1,
							latitude: latitude,
							longitude: longitude,
							iconPath: '/static/marker.png',
							width: 40,
							height: 40,
							callout: {
								content: address.value,
								borderRadius: 5,
								padding: 5,
								display: 'ALWAYS'
							}
						}
					]
				} else {
					uni.showToast({ title: '获取地址失败', icon: 'none' })
				}
			},
			fail: (err) => {
				uni.showToast({
					title: err.errMsg,
					icon: 'none'
				})
			}
		})
	}

	//打开地图app跳转
	const handMarkerTap = (e) => {
		// const mapContext = uni.createMapContext("myMap", this); 
		// mapContext.openMapApp({
		// 	latitude: center.latitude,  
		// 	longitude: center.longitude, 
		// 	destination: address.value, 
		// 	success(res) {
		// 		console.log('success!!', res);
		// 	},
		// 	fail(err) {
		// 		uni.showToast({
		// 			title: err.errMsg,
		// 			icon: 'none'
		// 		})
		// 	}
		// });
		console.log('markertap event:', e)

		// 微信小程序返回的是markerId
		if (e.detail && e.detail.markerId !== undefined) {
			const markerId = e.detail.markerId
			const marker = markers.value.find(m => m.id === markerId)

			if (marker && marker.extData) {
				currentDeviceInfo.value = {
					deviceName: marker.extData.deviceName || '',
					carNumber: marker.extData.carNumber || '',
					deviceSerial: marker.extData.deviceSerial || '',
					locationType: marker.extData.locationType || '',
					lngLat: `${marker.extData.latitude},${marker.extData.longitude}` || '',
					updateTime: marker.extData.updateTime || '',
					locationTime: marker.extData.locationTime || '',
					speed: marker.extData.speed || '',
					totalMileage: marker.extData.totalMileage || '',
					address: marker.extData.address || ''
				}
				showDevicePopup.value = true
				return
			}
		}

		console.warn('无法获取标记点信息', e)
		uni.showToast({
			title: '无法获取设备信息',
			icon: 'none'
		})
	}

	// 关闭弹窗
	const closeDevicePopup = () => {
		showDevicePopup.value = false
	}

	// 切换地图/列表视图
	const toggleMapMode = () => {
		showMap.value = !showMap.value
	}
</script>

<style lang="scss">
	.container {
		position: relative;
		width: 100%;
		height: 100vh;
		display: flex;
		flex-direction: column;
		background-color: #f5f7fa;

		.map-container {
			flex: 1;
			width: 100%;
			position: relative;
		}

		.tool-nav {
			position: absolute;
			top: 200rpx;
			right: 20rpx;
			z-index: 100;

			.btn-map-list {
				width: 60rpx;
				height: 60rpx;

			}

			.btn-map-list-icon {
				width: 100%;
				height: 100%;
				padding: 8rpx;
				border-radius: 10rpx;
				background-color: #69c2f1;
			}
		}
	}
</style>