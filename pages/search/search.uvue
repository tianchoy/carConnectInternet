<template>
  <view class="search-page">
    <view class="search-header">
      <view class="search-box">
        <uni-icons type="arrowleft" size="20" @tap="goBack" />
        <input 
          class="search-input" 
          placeholder="搜索地点" 
          v-model="keyword"
          @input="onInput"
          focus
        />
        <view class="clear-btn" v-if="keyword" @tap="clearKeyword">
          <uni-icons type="clear" size="20" />
        </view>
      </view>
    </view>
    
    <scroll-view class="search-result" scroll-y>
      <view 
        class="result-item" 
        v-for="(item, index) in searchResults" 
        :key="index"
        @tap="selectLocation(item)"
      >
        <view class="item-name">{{ item.name }}</view>
        <view class="item-address">{{ item.address }}</view>
      </view>
      
      <view class="no-result" v-if="keyword && searchResults.length === 0">
        未找到相关地点
      </view>
      
      <view class="hot-search" v-if="!keyword">
        <view class="section-title">热门搜索</view>
        <view class="hot-tags">
          <view 
            class="hot-tag" 
            v-for="(tag, index) in hotTags" 
            :key="'tag'+index"
            @tap="searchTag(tag)"
          >
            {{ tag }}
          </view>
        </view>
        
        <view class="section-title">搜索历史</view>
        <view 
          class="history-item" 
          v-for="(item, index) in searchHistory" 
          :key="'his'+index"
          @tap="selectLocation(item)"
        >
          <uni-icons type="time" size="16" color="#999" />
          <view class="history-text">{{ item.name }}</view>
        </view>
      </view>
    </scroll-view>
  </view>
</template>

<script>
import { ref, onMounted } from 'vue';

export default {
  setup() {
    const keyword = ref('');
    const searchResults = ref([]);
    const hotTags = ref(['餐厅', '酒店', '超市', '医院', '银行', '学校', '加油站', '停车场']);
    const searchHistory = ref([]);
    const lat = ref(0);
    const lng = ref(0);
    const debounceTimer = ref(null);

    onMounted(() => {
      const pages = getCurrentPages();
      const currentPage = pages[pages.length - 1];
      const options = currentPage.options;
      
      lat.value = parseFloat(options.lat) || 39.9042;
      lng.value = parseFloat(options.lng) || 116.4074;
      loadSearchHistory();
    });

    const loadSearchHistory = () => {
      const history = uni.getStorageSync('mapSearchHistory') || [];
      searchHistory.value = history;
    };

    const onInput = () => {
      clearTimeout(debounceTimer.value);
      debounceTimer.value = setTimeout(() => {
        if (keyword.value.trim()) {
          searchPOI(keyword.value);
        } else {
          searchResults.value = [];
        }
      }, 300);
    };

    const searchPOI = (keyword) => {
      // 实际项目中应调用地图API或后端接口
      searchResults.value = [
        {
          id: '1',
          name: `${keyword}测试地点1`,
          address: '北京市海淀区测试地址1',
          latitude: lat.value + (Math.random() * 0.01 - 0.005),
          longitude: lng.value + (Math.random() * 0.01 - 0.005)
        },
        {
          id: '2',
          name: `${keyword}测试地点2`,
          address: '北京市海淀区测试地址2',
          latitude: lat.value + (Math.random() * 0.01 - 0.005),
          longitude: lng.value + (Math.random() * 0.01 - 0.005)
        }
      ] as any;
    };

    const searchTag = (tag) => {
      keyword.value = tag;
      searchPOI(tag);
    };

    const selectLocation = (item) => {
      const history = uni.getStorageSync('mapSearchHistory') || [];
      const index = history.findIndex(h => h.id === item.id);
      if (index >= 0) {
        history.splice(index, 1);
      }
      history.unshift(item);
      if (history.length > 10) {
        history.pop();
      }
      uni.setStorageSync('mapSearchHistory', history);
      
      uni.navigateBack({
        delta: 1,
        success: () => {
          const eventChannel = getOpenerEventChannel();
          eventChannel.emit('selectLocation', item);
        }
      });
    };

    const clearKeyword = () => {
      keyword.value = '';
      searchResults.value = [];
    };

    const goBack = () => {
      uni.navigateBack();
    };

    return {
      keyword,
      searchResults,
      hotTags,
      searchHistory,
      onInput,
      searchTag,
      selectLocation,
      clearKeyword,
      goBack
    };
  }
};
</script>

<style>
.search-page {
  width: 100%;
  height: 100vh;
  background-color: #f5f5f5;
}

.search-header {
  padding: 15px;
  background-color: #fff;
}

.search-box {
  display: flex;
  align-items: center;
  background-color: #f5f5f5;
  border-radius: 20px;
  padding: 8px 15px;
}

.search-input {
  flex: 1;
  height: 30px;
  margin: 0 10px;
  font-size: 14px;
}

.clear-btn {
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.search-result {
  height: calc(100vh - 60px);
  padding: 15px;
}

.result-item {
  padding: 12px 0;
  border-bottom: 1px solid #eee;
}

.item-name {
  font-size: 16px;
  margin-bottom: 4px;
}

.item-address {
  font-size: 12px;
  color: #999;
}

.no-result {
  padding: 20px;
  text-align: center;
  color: #999;
}

.section-title {
  font-size: 14px;
  color: #999;
  margin: 15px 0 10px;
}

.hot-tags {
  display: flex;
  flex-wrap: wrap;
}

.hot-tag {
  padding: 6px 12px;
  background-color: #fff;
  border-radius: 15px;
  margin-right: 10px;
  margin-bottom: 10px;
  font-size: 14px;
}

.history-item {
  display: flex;
  align-items: center;
  padding: 12px 0;
  border-bottom: 1px solid #eee;
}

.history-text {
  margin-left: 8px;
  font-size: 14px;
}
</style>